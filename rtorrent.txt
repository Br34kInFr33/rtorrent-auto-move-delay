# Delay in seconds
method.insert.value = event.download.finished_delayed.interval, 600

# Add persistent view (queue holding delayed items)
view.add = finished_delayed
view.persistent = finished_delayed

# Add new event for delayed completion handling
method.insert = event.download.finished_delayed, multi|rlookup|static
method.set_key = event.download.finished, !add_to_finished_delayed, "d.views.push_back_unique = finished_delayed ; view.filter_download = finished_delayed"
method.set_key = event.download.finished_delayed, !remove_from_finished_delayed, "d.views.remove = finished_delayed ; view.filter_download = finished_delayed"

# Call new event for items that passed the delay interval
schedule2 = event.download.finished_delayed, 60, 60, ((d.multicall2, finished_delayed, "branch=\"elapsed.greater=(d.timestamp.finished),(event.download.finished_delayed.interval)\", event.download.finished_delayed="))

#method.insert = d.get_finished_dir, simple, "cat=~/torrents/rtorrent/Download/"
#method.set_key = event.download.finished_delayed,move_complete,"d.directory.set=$d.get_finished_dir=;execute=mkdir,-p,$d.get_finished_dir=;execute=mv,-u,$d.base_path=,$d.get_finished_dir=;d.check_hash="

method.insert = d.get_finished_dir, simple, "cat=~/Download/,$d.custom1="
method.insert = d.data_path, simple, "if=(d.is_multi_file), (cat,(d.directory),/), (cat,(d.directory),/,(d.name))"
method.insert = d.move_to_complete, simple, "d.directory.set=$argument.1=; execute=mkdir,-p,$argument.1=; execute=mv,-u,$argument.0=,$argument.1=; d.save_full_session="
method.set_key = event.download.finished_delayed,move_complete,"d.move_to_complete=$d.data_path=,$d.get_finished_dir=;d.check_hash="
